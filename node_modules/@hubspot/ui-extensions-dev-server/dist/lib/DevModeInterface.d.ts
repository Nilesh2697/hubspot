import type { ExtensionConfig, PlatformVersion, ProjectComponentMap } from './types';
import type { ServiceConfiguration } from '@hubspot/app-functions-dev-server/dist/types';
import { PromptModule } from 'inquirer';
import { DevServerState } from './DevServerState';
interface SetupArguments {
    components: ProjectComponentMap;
    debug?: boolean;
    extensionConfig?: ExtensionConfig;
    onUploadRequired?: VoidFunction;
    promptUser: PromptModule;
}
interface ProjectConfig {
    name: string;
    srcDir: string;
    platformVersion?: PlatformVersion;
}
interface StartArguments {
    accountId?: number;
    debug?: boolean;
    httpClient?: ServiceConfiguration['httpClient'];
    projectConfig?: ProjectConfig;
}
interface AppExtensionMapping {
    name: string;
    value: ExtensionConfig;
}
declare class DevModeInterface {
    configs?: ExtensionConfig[];
    devServerState?: DevServerState;
    onUploadRequired?: VoidFunction;
    shutdown?: () => Promise<void>;
    _generateAppExtensionMappings(components: ProjectComponentMap): AppExtensionMapping[];
    _getPlatformVersion(projectConfig?: ProjectConfig): PlatformVersion;
    setup({ components, debug, extensionConfig, onUploadRequired, promptUser, }: SetupArguments): Promise<void>;
    fileChange(filePath: string, __event: unknown): Promise<void>;
    start({ accountId, debug, httpClient, projectConfig }: StartArguments): Promise<void>;
    cleanup(): Promise<void>;
}
declare const _default: DevModeInterface;
export default _default;
