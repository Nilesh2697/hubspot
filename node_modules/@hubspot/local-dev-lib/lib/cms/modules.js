"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createModule = exports.validateSrcAndDestPaths = exports.ValidationIds = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_2 = require("../path");
const fs_1 = require("../fs");
const github_1 = require("../github");
const standardErrors_1 = require("../../errors/standardErrors");
const logger_1 = require("../../utils/logger");
const modules_1 = require("../../utils/cms/modules");
const i18nKey = 'lib.cms.modules';
// Ids for testing
exports.ValidationIds = {
    SRC_REQUIRED: 'SRC_REQUIRED',
    DEST_REQUIRED: 'DEST_REQUIRED',
    MODULE_FOLDER_REQUIRED: 'MODULE_FOLDER_REQUIRED',
    MODULE_TO_MODULE_NESTING: 'MODULE_TO_MODULE_NESTING',
    MODULE_NESTING: 'MODULE_NESTING',
};
const getValidationResult = (id, message) => ({ id, message });
async function validateSrcAndDestPaths(src, dest) {
    const results = [];
    if (!(0, modules_1.isPathInput)(src)) {
        results.push(getValidationResult(exports.ValidationIds.SRC_REQUIRED, '`src` is required.'));
    }
    if (!(0, modules_1.isPathInput)(dest)) {
        results.push(getValidationResult(exports.ValidationIds.DEST_REQUIRED, '`dest` is required.'));
    }
    if (results.length || !src || !dest) {
        return results;
    }
    const [_src, _dest] = [src, dest].map(inputPath => {
        const result = { ...inputPath };
        if (result.isLocal) {
            result.path = path_1.default.resolve((0, path_2.getCwd)(), result.path);
        }
        else if (result.isHubSpot) {
            result.path = path_1.default.posix.normalize(result.path);
        }
        return result;
    });
    // src is a .module folder and dest is within a module. (Nesting)
    // e.g. `upload foo.module bar.module/zzz`
    if ((0, modules_1.isModuleFolder)(_src) && (0, modules_1.isModuleFolderChild)(_dest)) {
        return results.concat(getValidationResult(exports.ValidationIds.MODULE_TO_MODULE_NESTING, '`src` is a module path and `dest` is within a module.'));
    }
    // src is a .module folder but dest is not
    // e.g. `upload foo.module bar`
    if ((0, modules_1.isModuleFolder)(_src) && !(0, modules_1.isModuleFolder)(_dest)) {
        return results.concat(getValidationResult(exports.ValidationIds.MODULE_FOLDER_REQUIRED, '`src` is a module path but `dest` is not.'));
    }
    // src is a folder that includes modules and dest is within a module. (Nesting)
    if (_src.isLocal && (0, modules_1.isModuleFolderChild)(_dest)) {
        const stat = await fs_extra_1.default.stat(_src.path);
        if (stat.isDirectory()) {
            const files = await (0, fs_1.walk)(_src.path);
            const srcHasModulesChildren = files.some(file => (0, modules_1.isModuleFolderChild)({ ..._src, path: file }));
            if (srcHasModulesChildren) {
                return results.concat(getValidationResult(exports.ValidationIds.MODULE_NESTING, '`src` contains modules and `dest` is within a module.'));
            }
        }
    }
    return results;
}
exports.validateSrcAndDestPaths = validateSrcAndDestPaths;
const createModuleCallbackKeys = ['creatingPath', 'creatingModule'];
async function createModule(moduleDefinition, name, dest, options = {
    allowExistingDir: false,
}, logCallbacks) {
    const logger = (0, logger_1.makeTypedLogger)(logCallbacks);
    const writeModuleMeta = ({ contentTypes, moduleLabel, global }, dest) => {
        const metaData = {
            label: moduleLabel,
            css_assets: [],
            external_js: [],
            global: global,
            help_text: '',
            host_template_types: contentTypes,
            js_assets: [],
            other_assets: [],
            smart_type: 'NOT_SMART',
            tags: [],
            is_available_for_new_content: false,
        };
        fs_extra_1.default.writeJSONSync(dest, metaData, { spaces: 2 });
    };
    const moduleFileFilter = (src, dest) => {
        const emailEnabled = moduleDefinition.contentTypes.includes('EMAIL');
        switch (path_1.default.basename(src)) {
            case 'meta.json':
                writeModuleMeta(moduleDefinition, dest);
                return false;
            case 'module.js':
            case 'module.css':
                if (emailEnabled) {
                    return false;
                }
                return true;
            default:
                return true;
        }
    };
    const folderName = !name || name.endsWith('.module') ? name : `${name}.module`;
    const destPath = path_1.default.join(dest, folderName);
    if (!options.allowExistingDir && fs_extra_1.default.existsSync(destPath)) {
        (0, standardErrors_1.throwErrorWithMessage)(`${i18nKey}.createModule.errors.writeModuleMeta`, {
            path: destPath,
        });
    }
    else {
        logger('creatingPath', `${i18nKey}.createModule.creatingPath`, {
            path: destPath,
        });
        fs_extra_1.default.ensureDirSync(destPath);
    }
    logger('creatingModule', `${i18nKey}.createModule.creatingModule`, {
        path: destPath,
    });
    await (0, github_1.downloadGithubRepoContents)('HubSpot/cms-sample-assets', 'modules/Sample.module', destPath, '', moduleFileFilter);
}
exports.createModule = createModule;
