"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancelStagedBuild = exports.fetchDeployComponentsMetadata = exports.fetchProjectSettings = exports.getDeployStructure = exports.getDeployStatus = exports.deployProject = exports.getBuildStructure = exports.getBuildStatus = exports.fetchProjectBuilds = exports.fetchPlatformVersions = exports.deleteProject = exports.downloadProject = exports.fetchProject = exports.uploadProject = exports.createProject = exports.fetchProjects = void 0;
const http_1 = __importDefault(require("../http"));
const fs_1 = __importDefault(require("fs"));
const PROJECTS_API_PATH = 'dfs/v1/projects';
const PROJECTS_DEPLOY_API_PATH = 'dfs/deploy/v1';
const DEVELOPER_PROJECTS_API_PATH = 'developer/projects/v1';
async function fetchProjects(accountId) {
    return http_1.default.get(accountId, {
        url: PROJECTS_API_PATH,
    });
}
exports.fetchProjects = fetchProjects;
async function createProject(accountId, name) {
    return http_1.default.post(accountId, {
        url: PROJECTS_API_PATH,
        data: {
            name,
        },
    });
}
exports.createProject = createProject;
async function uploadProject(accountId, projectName, projectFile, uploadMessage, platformVersion) {
    const formData = {
        file: fs_1.default.createReadStream(projectFile),
        uploadMessage,
    };
    if (platformVersion) {
        formData.platformVersion = platformVersion;
    }
    return http_1.default.post(accountId, {
        url: `${PROJECTS_API_PATH}/upload/${encodeURIComponent(projectName)}`,
        timeout: 60000,
        formData,
    });
}
exports.uploadProject = uploadProject;
async function fetchProject(accountId, projectName) {
    return http_1.default.get(accountId, {
        url: `${PROJECTS_API_PATH}/${encodeURIComponent(projectName)}`,
    });
}
exports.fetchProject = fetchProject;
async function downloadProject(accountId, projectName, buildId) {
    return http_1.default.get(accountId, {
        url: `${PROJECTS_API_PATH}/${encodeURIComponent(projectName)}/builds/${buildId}/archive-full`,
        encoding: null,
        headers: { accept: 'application/zip', contentType: 'application/json' },
    });
}
exports.downloadProject = downloadProject;
async function deleteProject(accountId, projectName) {
    return http_1.default.delete(accountId, {
        url: `${PROJECTS_API_PATH}/${encodeURIComponent(projectName)}`,
    });
}
exports.deleteProject = deleteProject;
async function fetchPlatformVersions(accountId) {
    return http_1.default.get(accountId, {
        url: `${DEVELOPER_PROJECTS_API_PATH}/platformVersion`,
    });
}
exports.fetchPlatformVersions = fetchPlatformVersions;
async function fetchProjectBuilds(accountId, projectName, query) {
    return http_1.default.get(accountId, {
        url: `${PROJECTS_API_PATH}/${encodeURIComponent(projectName)}/builds`,
        query,
    });
}
exports.fetchProjectBuilds = fetchProjectBuilds;
async function getBuildStatus(accountId, projectName, buildId) {
    return http_1.default.get(accountId, {
        url: `${PROJECTS_API_PATH}/${encodeURIComponent(projectName)}/builds/${buildId}/status`,
    });
}
exports.getBuildStatus = getBuildStatus;
async function getBuildStructure(accountId, projectName, buildId) {
    return http_1.default.get(accountId, {
        url: `dfs/v1/builds/by-project-name/${encodeURIComponent(projectName)}/builds/${buildId}/structure`,
    });
}
exports.getBuildStructure = getBuildStructure;
async function deployProject(accountId, projectName, buildId) {
    return http_1.default.post(accountId, {
        url: `${PROJECTS_DEPLOY_API_PATH}/deploys/queue/async`,
        data: {
            projectName,
            buildId,
        },
    });
}
exports.deployProject = deployProject;
async function getDeployStatus(accountId, projectName, deployId) {
    return http_1.default.get(accountId, {
        url: `${PROJECTS_DEPLOY_API_PATH}/deploy-status/projects/${encodeURIComponent(projectName)}/deploys/${deployId}`,
    });
}
exports.getDeployStatus = getDeployStatus;
async function getDeployStructure(accountId, projectName, deployId) {
    return http_1.default.get(accountId, {
        url: `${PROJECTS_DEPLOY_API_PATH}/deploys/by-project-name/${encodeURIComponent(projectName)}/deploys/${deployId}/structure`,
    });
}
exports.getDeployStructure = getDeployStructure;
async function fetchProjectSettings(accountId, projectName) {
    return http_1.default.get(accountId, {
        url: `${PROJECTS_API_PATH}/${encodeURIComponent(projectName)}/settings`,
    });
}
exports.fetchProjectSettings = fetchProjectSettings;
async function fetchDeployComponentsMetadata(accountId, projectId) {
    return http_1.default.get(accountId, {
        url: `${PROJECTS_API_PATH}/by-id/${projectId}/deploy-components-metadata`,
    });
}
exports.fetchDeployComponentsMetadata = fetchDeployComponentsMetadata;
async function cancelStagedBuild(accountId, projectName) {
    return http_1.default.post(accountId, {
        url: `${PROJECTS_API_PATH}/${encodeURIComponent(projectName)}/builds/staged/cancel`,
    });
}
exports.cancelStagedBuild = cancelStagedBuild;
