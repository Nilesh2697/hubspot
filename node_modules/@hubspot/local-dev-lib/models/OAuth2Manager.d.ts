import { FlatAccountFields, OAuthAccount, TokenInfo } from '../types/Accounts';
type WriteTokenInfoFunction = (tokenInfo: TokenInfo) => void;
type RefreshTokenResponse = {
    refresh_token: string;
    access_token: string;
    expires_in: string;
};
type ExchangeProof = {
    grant_type: string;
    client_id?: string;
    client_secret?: string;
    refresh_token?: string;
};
declare class OAuth2Manager {
    account: OAuthAccount;
    writeTokenInfo: WriteTokenInfoFunction;
    refreshTokenRequest: Promise<RefreshTokenResponse> | null;
    constructor(account: OAuthAccount, writeTokenInfo: WriteTokenInfoFunction);
    accessToken(): Promise<string | undefined>;
    fetchAccessToken(exchangeProof: ExchangeProof): Promise<void>;
    exchangeForTokens(exchangeProof: ExchangeProof): Promise<void>;
    refreshAccessToken(): Promise<void>;
    toObj(): {
        env: import("../types/Config").Environment;
        clientSecret: string | undefined;
        clientId: string | undefined;
        scopes: string[] | undefined;
        tokenInfo: TokenInfo | undefined;
        name: string | undefined;
        accountId: number;
    };
    static fromConfig(accountConfig: FlatAccountFields, writeTokenInfo: WriteTokenInfoFunction): OAuth2Manager;
}
export default OAuth2Manager;
